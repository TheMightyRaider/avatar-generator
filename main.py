import io
import hashlib
from helper import flat_matrix, pixel_generation, generate_color, draw_identicon, generate_matrix, mirror_matrix

# Hash the input
# Generate a 6*6 matrix
# Find a algorithm to find position in the matrix that will generate a unique pattern. [possible variation [2^36]- "68719476736"]
#   Goal is to have the position in a continuous manner.
#       First method, comparing the adjacent position.
#       Second method, using average.
#       Third method, using median.
#       Fourth method, ODD-EVEN position
# Fill the position with colors.

# Generating avatar based on username


def generate_identicon(name):
    # hashlib takes the argument in byte, hence converting the string input to bytes
    byte_value = hashlib.md5(name.encode())

    # The generated byte input is converted to hexa format using hexdigest()
    hash_in_hexa = byte_value.hexdigest()

    color = generate_color(hash_in_hexa)
    half_matrix = generate_matrix(hash_in_hexa)
    matrix = mirror_matrix(half_matrix)
    flatten_list = flat_matrix(matrix)
    pixels = pixel_generation(flatten_list)
    identicon = draw_identicon(color, flatten_list, pixels)

    byte_array = io.BytesIO()
    identicon.save(byte_array, format='PNG')

    return bt.getvalue()


# user_input = input('Enter the name :')
generate_identicon('Testing')
