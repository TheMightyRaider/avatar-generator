import hashlib
import numpy as np


# Hash the input
# Generate a 6*6 matrix
# Find a algorithm to find position in the matrix that will generate a unique pattern. [possible variation [2^36]- "68719476736"]
#   Goal is to have the position in a continuous manner.
#       First method, comparing the adjacent position.
#       Second method, using average.
#       Third method, using median.
#       Fourth method, ODD-EVEN position
# Fill the position with colors.

# Generating avatar based on username


def generate_unique(name):
    pattern_array = []
    # hashlib takes the argument in byte, hence converting the string input to bytes
    byte_value = hashlib.md5(name.encode())

    # The generated byte input is converted to hexa format using hexdigest()
    hash_in_hexa = byte_value.hexdigest()

    matrix = np.zeros((6, 6))

    for position, letter in enumerate(hash_in_hexa):
        if position+1 != 32 and ord(hash_in_hexa[position]) > ord(hash_in_hexa[position+1]):
            pattern_array.append(1)
        else:
            pattern_array.append(0)

    for i, value in enumerate(matrix):
        mirror_column = 2
        for j in range(0, 6):
            if j >= 3:
                matrix[i][j] = matrix[i][mirror_column]
                mirror_column -= 1
                continue
            matrix[i][j] = pattern_array.pop()

    print(matrix)


def m2(name):
    pattern_array = []
    total = 0

    # hashlib takes the argument in byte, hence converting the string input to bytes
    byte_value = hashlib.md5(name.encode())

    # The generated byte input is converted to hexa format using hexdigest()
    hash_in_hexa = byte_value.hexdigest()

    matrix = np.zeros((6, 6))

    for letter in hash_in_hexa:
        ascii_value = ord(letter)
        total += ascii_value

    avg = total/32
    for position, letter in enumerate(hash_in_hexa):
        if ord(hash_in_hexa[position]) > avg:
            pattern_array.append(1)
        else:
            pattern_array.append(0)

    for i, value in enumerate(matrix):
        mirror_column = 2
        for j in range(0, 6):
            if j >= 3:
                matrix[i][j] = matrix[i][mirror_column]
                mirror_column -= 1
                continue
            matrix[i][j] = pattern_array.pop()

    print(matrix)


def m3(name):  # Not suitable
    pattern_array = []
    count = {}
    median = 0

    # hashlib takes the argument in byte, hence converting the string input to bytes
    byte_value = hashlib.md5(name.encode())

    # The generated byte input is converted to hexa format using hexdigest()
    hash_in_hexa = byte_value.hexdigest()

    matrix = np.zeros((6, 6))

    for letter in hash_in_hexa:
        count[letter] = count.get(letter, 0)+1
        if count[letter] > median:
            median = ord(letter)

    for letter in hash_in_hexa:
        if ord(letter) < median:
            pattern_array.append(1)
        else:
            pattern_array.append(0)

    for i, value in enumerate(matrix):
        mirror_column = 2
        for j in range(0, 6):
            if j >= 3:
                matrix[i][j] = matrix[i][mirror_column]
                mirror_column -= 1
                continue
            matrix[i][j] = pattern_array.pop()

    print(matrix)


def m4(name):
    pattern_array = []

    # hashlib takes the argument in byte, hence converting the string input to bytes
    byte_value = hashlib.md5(name.encode())

    # The generated byte input is converted to hexa format using hexdigest()
    hash_in_hexa = byte_value.hexdigest()

    matrix = np.zeros((6, 6))

    for letters in hash_in_hexa:
        if ord(letters) % 2 == 0:
            pattern_array.append(1)
        else:
            pattern_array.append(0)

    for i, value in enumerate(matrix):
        mirror_column = 2
        for j in range(0, 6):
            if j >= 3:
                matrix[i][j] = matrix[i][mirror_column]
                mirror_column -= 1
                continue
            matrix[i][j] = pattern_array.pop()

    print(matrix)


# user_input = input('Enter the name :')
generate_unique('Testing')
print('\n')
m2('Testing')
print('\n')
m3('Testing')
print('\n')
m4('Testing')
